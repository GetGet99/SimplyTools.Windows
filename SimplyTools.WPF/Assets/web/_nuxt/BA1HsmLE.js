import{_ as y}from"./CLnk0gVi.js";import{e as x,I as h,H as V,f as k,z as b,g,o as _,h as r,r as I,w as u,a,c as w,F as C,y as M,b as B,t as P,i as N,d as c}from"./CfbvuZjT.js";import{u as O,M as T,c as D}from"./DGNIRpLh.js";import{_ as F}from"./gQrGCUfV.js";import{_ as H}from"./DlAUqK2U.js";import"./D7TXt3Px.js";import"./CQCgYrss.js";import"./BAYpYBTo.js";const $=x({__name:"BigIntBox",props:h({placeholder:{},mode:{}},{modelValue:{},modelModifiers:{}}),emits:["update:modelValue"],setup(p,{expose:l}){const i=V(p,"modelValue"),t=k("nbb"),d=p;l({nbb:t});const s=b(()=>{const e=d.mode;return e===16n||e===16?"hex":e===10n||e===10?"integer":e===8n||e===8?"octal":e===2n||e===2?"binary":e}),f=b(()=>{const e=d.mode;return e==="hex"||e===16n||e===16?16:e==="octal"||e===8n||e===8?8:e==="binary"||e===2n||e===2?2:10});function o(e,m){return e[0]==="-"?"-"+m+e.slice(1):m+e}return(e,m)=>{const v=y;return _(),g(v,{ref_key:"nbb",ref:t,placeholder:e.placeholder,mode:r(s),"model-value":i.value?.toString(r(f))??"","onUpdate:modelValue":m[0]||(m[0]=n=>{if(n)try{r(s)==="binary"&&(n=o(n,"0b")),r(s)==="hex"&&(n=o(n,"0x")),r(s)==="octal"&&(n=o(n,"0o")),i.value=BigInt(n)}catch{}})},null,8,["placeholder","mode","model-value"])}}}),L=Object.assign($,{__name:"BigIntBox"}),R={class:"flex flex-col gap-2"},S=["value"],U={class:"flex items-center"},j={class:"text-center italic"},q=x({__name:"numbase",setup(p){O(T.pages.find(i=>i.path==="numbase"));const l=I(void 0);return(i,t)=>{const d=L,s=D,f=F;return _(),g(f,{category:"math",tool:"Base Converter",class:"flex flex-col px-4 sm:items-center gap-8"},{summary:u(()=>t[5]||(t[5]=[c(" Convert numbers between decimal, hexadecimal, binary, and octal. ",-1)])),details:u(()=>t[6]||(t[6]=[a("p",null," This base converter lets you work across multiple number systems — base 10 (decimal), base 16 (hexadecimal), base 8 (octal), and base 2 (binary). It’s designed for quick conversions. ",-1)])),default:u(()=>[t[7]||(t[7]=a("div",{class:"text-center italic -mt-4"},"Type the number into one of the box, and it'll automatically convert for you!",-1)),a("div",R,[(_(),w(C,null,M([16n,10n,8n,2n],o=>a("div",{value:o,class:"space-y-1 sm:min-w-100"},[a("div",U,[a("span",null,P(o===16n?"Hexadecimal (Base 16)":o===10n?"Decimal (Base 10)":o===8n?"Octal (Base 8)":"Binary (Base 2)"),1)]),B(d,{class:"w-full",placeholder:o===16n?"Hexadecimal (Base 16)":o===10n?"Decimal (Base 10)":o===8n?"Octal (Base 8)":"Binary (Base 2)",mode:o,modelValue:r(l),"onUpdate:modelValue":t[0]||(t[0]=e=>N(l)?l.value=e:null)},null,8,["placeholder","mode","modelValue"])],8,S)),64))]),a("aside",j,[t[2]||(t[2]=c(" Wanted more advanced stuff like bit shifts and complement representations?",-1)),t[3]||(t[3]=a("br",null,null,-1)),t[4]||(t[4]=c("It might worth to also check out our ",-1)),B(s,{href:"/dev/progcalc"},{default:u(()=>t[1]||(t[1]=[c("Programmer Calculator",-1)])),_:1,__:[1]})])]),_:1,__:[7]})}}}),X=H(q,[["__scopeId","data-v-f0c3d388"]]);export{X as default};
