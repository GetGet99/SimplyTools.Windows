{%- meta -%}
name: INotifyPropertyChanged Generator
description: Generate INotifyPropertyChanged class
lang: csharp
properties:
  # Whether to use C# 14 `field` keyword rather than generating backing field
  fieldKeyword: boolean
  # Whether to include the partial keyword (default: false)
  partial: boolean
  # List of using namespaces
  usings: string[]
  # Class name
  name: string
  # Properties to generate
  props:
    type: string
    name: string
example:
  namespace: SimplyTools.Example
  name: Person
  partial: true
  fieldKeyword: false
  usings:
    - System
  props:
    - type: string
      name: FirstName
    - type: string
      name: LastName
    - type: int
      name: Age
{%- endmeta -%}
{%- for using in usings -%}
    using {{using}};
{% endfor -%}
{%- if namespace -%} namespace {{ namespace }} { {%- endif %}
    {% if partial %}partial {% endif %}class {{name}} : INotifyPropertyChanged {
        {%- for prop in props %}
        {% unless fieldKeyword -%}
            private {{ prop.type }} _{{ prop.name }};
        {% assign fieldname = "_" | append: prop.name -%}
        {% else %}
            {%- assign fieldname = "field" -%}
        {%- endunless -%}
        public {{ prop.type }} {{ prop.name }} {
            get {
                return {{ fieldname }};
            }
            set {
                {{ fieldname }} = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof({{prop.name}})))
            }
        }
        {% endfor %}
    }
{% if namespace -%} } {%- endif -%}